# this can be any application server, not just Unicorn/Rainbows!
upstream app_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).
  # for UNIX domain socket setups:
  server unix:/var/run/gunicorn/lemontest.sock fail_timeout=0;
}

server {
  listen 80 default deferred; # for Linux

  client_max_body_size 4G;
  server_name _;

  # ~2 seconds is often enough for most folks to parse HTML/CSS and
  # retrieve needed images/icons/frames, connections are cheap in
  # nginx so increasing this is generally safe...
  keepalive_timeout 5;

  if ($http_user_agent ~ "HTTrack") {
    return 403;
  }

  location /static {
    # path for static files
    alias /opt/lemontest/deployment/lemontest/lemontest/static;
    index index.html;
    autoindex on;
  }

  location /archives {
    alias /opt/lemontest/deployment/files;
    autoindex on;
    limit_req zone=one burst=30 nodelay;
    location ~ ^/archives/\w+/test_results {
        limit_req zone=two burst=100 nodelay;
    }
    max_ranges 0;
  }

  location / {
    # an HTTP header important enough to have its own Wikipedia entry:
    #   http://en.wikipedia.org/wiki/X-Forwarded-For
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # pass the Host: header from the client right along so redirects
    # can be set properly within the Rack application
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;

    # set "proxy_buffering off" *only* for Rainbows! when doing
    # Comet/long-poll stuff.  It's also safe to set if you're
    # using only serving fast clients with Unicorn + nginx.
    # Otherwise you _want_ nginx to buffer responses to slow
    # clients, really.
    # proxy_buffering off;

    # Try to serve static files from nginx, no point in making an
    # *application* server like Unicorn/Rainbows! serve static files.
    if (!-f $request_filename) {
      proxy_pass http://app_server;
      break;
    }
  }

  # Error pages
  error_page 500 502 503 504 /50x.html;
  location = /50x.html {
    root /usr/share/nginx/www;
  }
}

